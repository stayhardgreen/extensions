FORMAT: 1A
HOST: http://raindrop.io:1505/v1

# Raindrop.io API 1.0
Please note that you must [register your application](https://raindrop.io/app/profile) and authenticate with OAuth or use your API client id and secret when making requests.
But API methods with **Public** label not require authentication.

## User [/user/{user_id}]
### Retrieve [GET]

+ Parameters
    + user_id (number,optional) ... By default current user.

+ Response 200 (application/json)

        {
            "user": {
                "_id": 32,
                "email": "User's email",
                "fullName": "User's full name",
                "groups": [ /*Array of groups*/
                    {
                        "title": "Group name",
                        "collections": [1,2,3], /*id's of collections which are in this group*/
                        "hidden": false /*Group collapsed or not*/
                    }
                ]
            },
            "result": true
        }

## User actions [/userConfig]
### Save groups [PUT]

+ Request (application/json)

        {
            "groups": [
                {
                    "title":"Group name",
                    "collections": [1,2,3],
                    "hidden": false
                }
            ]
        }

+ Response 200 (application/json)

        {
            "user": {
                "_id": 32,
                "email": "User's email",
                "fullName": "User's full name",
                "groups": [
                    {
                        "title": "Group name",
                        "collections": [1,2,3],
                        "hidden": false
                    }
                ]
            },
            "result": true
        }
        

## Collections [/collections/{user_id}{?parent}]
### Retrieve collections list [GET]
+ Parameters
    + user_id (number, optional) ... By default current user
    + parent (number, optional) ... Parent collection id. By default root collections.

+ Response 200 (application/json)

        {
            "items":[
                {
                    _id: 9,
                    title: "Collection title",
                    user.$id: 32,
                    excerpt: "Description",
                    count: 1,
                    created: Date,
                    lastUpdate: Date,
                    public: true,
                    view: "grid"/"list",
                    cover: ["/img/templates/basketball.png"],
                    parent.$id: 0
                }
            ],
            "result": true
        }
        
## Collection [/collection/{id}]
### Retrieve [GET]
+ Parameters
    + id (number, required) ... Collection id
    
+ Response 200 (application/json)

        {
            "item": {
                "_id": 9,
                "title": "Collection title",
                "user.$id": 32,
                "excerpt": "Description",
                "count": 1,
                "created": Date,
                "lastUpdate": Date,
                "public": true,
                "view": "grid"/"list",
                "cover": ["/img/templates/basketball.png"],
                "parent.$id": 0
            },
            "result": true
        }
        
### Create [POST]
+ Parameters
    + id (optional) ... Not required

+ Request (application/json)

        {
            "title", /*Collection title*/
            "excerpt", /*Description (optional)*/
            "public", /*Public collection or not. By default false (boolean, optional)*/
            "view", /*View style ("list"/"grid"). By default "list". (optional)*/
            "parentId", /*"root" or id of parent collection (optional)*/
            "cover_path" /*name of icon. For example "airplane". Entire list of icons in API docs. (optional) */
        }
        
+ Response 200 (application/json)

        {
            "item": {
                "_id": 9,
                "title": "Collection title",
                "user.$id": 32,
                "excerpt": "Description",
                "count": 1,
                "created": Date,
                "lastUpdate": Date,
                "public": true,
                "view": "grid"/"list",
                "cover": ["/img/templates/basketball.png"],
                "parent.$id": 0
            },
            "result": true
        }
        
        
### Update [PUT]
+ Parameters
    + id (number, required) ... Collection id
    
+ Request (application/json)

        {
            "title", /*Collection title*/
            "excerpt", /*Description (optional)*/
            "public", /*Public collection or not. By default false (boolean, optional)*/
            "view", /*View style ("list"/"grid"). By default "list". (optional)*/
            "parentId", /*"root" or id of parent collection (optional)*/
            "cover_path" /*name of icon. For example "airplane". Entire list of icons in API docs. (optional) */
        }
        
+ Response 200 (application/json)

        {
            "item": {
                "_id": 9,
                "title": "Collection title",
                "user.$id": 32,
                "excerpt": "Description",
                "count": 1,
                "created": Date,
                "lastUpdate": Date,
                "public": true,
                "view": "grid"/"list",
                "cover": ["/img/templates/basketball.png"],
                "parent.$id": 0
            },
            "result": true
        }
        
### Delete [DELETE]
+ Parameters
    + id (number, required) ... Collection id
    
+ Response 200 (application/json)
        
        {
            "result": true
        }



## Bookmarks [/bookmarks/{collection_id}{?search}{?page}{?perpage}{?sort}]
### Retrive and/or search bookmarks [GET]
+ Parameters
    + collection_id (number, required) ... Collection id. Reserved id's: 0 - all bookmarks; -1 - inbox; -99 - trash;
    + search (array, optional) ... For example: [{"key":"tag","val":"angular"}, {"key":"type","val":"article"}]. Available *keys*: word, type, tag, domain. Field *val* is query for type of key.
    + perpage (number, optional) ... How many bookmarks per page. Max 40.
    + page (number, optional) ... 0,1,2,3,4...
    + sort (string, optional) ... Sorting: "lastUpdate" (by date) or "title" (alphabetical)

+ Response 200 (application/json)

        {
            "result": true,
            "author": true, /* if current user is owner */
            "items": [
                _id: 2,
                collection.$id: 210296,
                cover: "http://img.com/img.jpg", /* cover image */
                coverId: null, /* cover index from media array */
                domain: "google.com",
                excerpt: "Description",
                lastUpdate: Date,
                link: "http://google.com/about.html", /* url */
                media: [{type: "image", link: "http://img.com/img.jpg"}], /* array of images */
                next: 3, /* next bookmark id */
                prev: 1, /* previous bookmark id */
                removed: false, /* removed or not */
                tags: ["angular","js"],
                title: "Title",
                type: "article", /* article/image/video/link */
                user.$id: 32
            ]
        }

## Bookmark [/bookmark/{id}]
### Retrieve [GET]
+ Parameters
    + id (number, required) ... Bookmark id

+ Response 200 (application/json)

        {
            "result": true,
            "author": true, /* if current user is owner */
            "item": [
                _id: 2,
                collection.$id: 210296,
                cover: "http://img.com/img.jpg", /* cover image */
                coverId: null, /* cover index from media array */
                domain: "google.com",
                excerpt: "Description",
                lastUpdate: Date,
                link: "http://google.com/about.html", /* url */
                media: [{type: "image", link: "http://img.com/img.jpg"}], /* array of images */
                html: "<b>Html content</b>",
                next: 3, /* next bookmark id */
                prev: 1, /* previous bookmark id */
                removed: false, /* removed or not */
                tags: ["angular","js"],
                title: "Title",
                type: "article", /* article/image/video/link */
                user.$id: 32
            ]
        }
        
### Create [POST]
+ Parameters
    + id (number, optional) ... Not required
    
+ Request (application/json)

        {
            collection.$id: 210296, /* collection id (optional) */
            cover: "URL", /* cover image (optional) */
            coverId: null, /* cover index from media array (optional) */
            excerpt: "Description", /* (optional) */
            media: [{type: "image", link: "http://img.com/img.jpg"}], /* array of images (optional) */
            tags: ["angular","js"], /* (optional) */
            title: "Title",
            type: "article" /* article/image/video/link (optional) */
        }
        
+ Response 200 (application/json)

### Update [PUT]
+ Parameters
    + id (number, required) ... Bookmark id
    
+ Request (application/json)

        {
            collection.$id: 210296, /* collection id (optional) */
            cover: "URL", /* cover image (optional) */
            coverId: null, /* cover index from media array (optional) */
            excerpt: "Description", /* (optional) */
            media: [{type: "image", link: "http://img.com/img.jpg"}], /* array of images (optional) */
            tags: ["angular","js"], /* (optional) */
            title: "Title",
            type: "article" /* article/image/video/link (optional) */
        }
        
+ Response 200 (application/json)


### Delete [DELETE]
+ Parameters
    + id (number, required) ... Bookmark id
    
+ Response 200 (application/json)
        
        {
            "result": true
        }